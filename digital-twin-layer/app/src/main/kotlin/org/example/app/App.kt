/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.app

import it.wldt.adapter.mqtt.digital.MqttDigitalAdapter
import it.wldt.adapter.mqtt.digital.MqttDigitalAdapterConfiguration
import it.wldt.adapter.mqtt.digital.topic.MqttQosLevel
import it.wldt.adapter.mqtt.physical.MqttPhysicalAdapter
import it.wldt.adapter.mqtt.physical.MqttPhysicalAdapterConfiguration
import it.wldt.core.engine.DigitalTwin
import it.wldt.core.engine.DigitalTwinEngine
import org.example.hdt.model.BloodPressure
import org.example.app.shadowing.DefaultShadowingFunction

object App {
    val MQTT_BROKER = System.getenv().getOrDefault("MQTT_BROKER", "127.0.0.1")
    val MQTT_PORT = System.getenv().getOrDefault("MQTT_PORT", "1883")
}

fun main() {
    runCatching {
        val dt = DigitalTwin("my-twin", DefaultShadowingFunction())

        /** PHYSICAL ADAPTERS **/
        val mqttPhysicalConfig = MqttPhysicalAdapterConfiguration.builder(App.MQTT_BROKER, Integer.parseInt(App.MQTT_PORT))
            .addPhysicalAssetPropertyAndTopic(
                "blood-pressure",
                BloodPressure.zero(),
                "sensor/blood-pressure",
                BloodPressure::decodeFromJsonStr,
                ).build()

        val mqttPhysicalAdapter = MqttPhysicalAdapter("test-mqtt-pa", mqttPhysicalConfig)
        dt.addPhysicalAdapter(mqttPhysicalAdapter)

        /** DIGITAL ADAPTERS **/
        val mqttDigitalConfig = MqttDigitalAdapterConfiguration.builder(App.MQTT_BROKER, Integer.parseInt(App.MQTT_PORT))
            .addPropertyTopic(
                "blood-pressure",
                "state/blood-pressure",
                MqttQosLevel.MQTT_QOS_0,
                BloodPressure::encodeToJsonStr,
                ).build()
        val mqttDigitalAdapter = MqttDigitalAdapter("test-mqtt-da", mqttDigitalConfig)
        dt.addDigitalAdapter(mqttDigitalAdapter)

        val engine = DigitalTwinEngine()
        engine.addDigitalTwin(dt)
        engine.startAll()
    }
}
