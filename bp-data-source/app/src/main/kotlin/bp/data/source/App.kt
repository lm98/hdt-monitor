/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package bp.data.source

import bp.data.source.model.Measurement
import com.google.auth.oauth2.GoogleCredentials
import com.google.firebase.FirebaseApp
import com.google.firebase.FirebaseOptions
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import kotlinx.coroutines.runBlocking
import org.eclipse.paho.client.mqttv3.MqttClient
import java.io.FileInputStream

fun main() = runBlocking {
    // Initialize Firebase
    val serviceAccount = FileInputStream("src/main/resources/serviceAccountKey.json")
    val options = FirebaseOptions.builder()
        .setCredentials(GoogleCredentials.fromStream(serviceAccount))
        .build()
    FirebaseApp.initializeApp(options)

    val db = FirebaseDatabase.getInstance()
    val referenceUrl = System.getenv().getOrDefault("FIREBASE_REFERENCE_URL", "")

    db.getReferenceFromUrl(referenceUrl).addListenerForSingleValueEvent(object: ValueEventListener {
        override fun onDataChange(snapshot: DataSnapshot) {
            for(measurementSnapshot in snapshot.children) {
                val measurement = measurementSnapshot.getValue(Measurement::class.java)
                measurement?.let {
                    println("Firebase Measurement: $it")
                    // SEND DATA OVER MQTT
                }
            }
        }

        override fun onCancelled(error: DatabaseError) {
            println("Firebase Database error: ${error.message}")
        }

    })

    // Initialize MQTT client
    /*
    val broker = System.getenv().getOrDefault("MQTT_BROKER", "127.0.0.1")
    val port = System.getenv().getOrDefault("MQTT_PORT", "1883")
    val mqttClient = MqttClient("$broker:$port", MqttClient.generateClientId())
    val mqttOptions = MqttConnectOptions().apply { isCleanSession = true }
    mqttClient.connect(mqttOptions)*/
}

fun sendToMqtt(mqttClient: MqttClient, topic: String, payload: String) {

}